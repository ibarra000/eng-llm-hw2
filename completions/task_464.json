{
  "task_id": 464,
  "description": "Check if all values in a dictionary are the same as a given value.",
  "input_format": "The first line contains the value V to check. The second line contains N, the number of key-value pairs. The next N lines each contain a key (which may include spaces) and an integer value separated by a space.",
  "output_format": "Output \"True\" if all dictionary values are equal to V, otherwise output \"False\".",
  "prompt": "; Check if all values in a dictionary are the same as a given value.\n; Input format: The first line contains the value V to check. The second line contains N, the number of key-value pairs. The next N lines each contain a key (which may include spaces) and an integer value separated by a space.\n; Output format: Output \"True\" if all dictionary values are equal to V, otherwise output \"False\".\n\n#lang racket\n\n",
  "completions": [
    "(define (check-all-values-equal-to-v v)\n  (define (check-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict-dict",
    "(define (check-dictionary-values v n)\n  (let loop ((i 0) (values '()))\n    (if (= i n)\n        (if (null? values)\n            #t\n            (loop (+ i 1) (cons (equal? v (car values)) values)))\n        (let ((key-value (read)))\n          (loop (+ i 1) (cons (equal? v (car key-value)) (cdr values)))))))\n\n;; Sample Input-Output Pairs\n;; Input:\n;; 5\n;; 3\n;; a 5\n;; b 5\n;; c 5\n;; Output:\n;; True\n\n;; Input:\n;; 5\n;; 3\n;; a 5\n;; b 6\n;; c 5\n;; Output:\n;; False\n\n;; Test cases\n(check-dictionary-values 5 3) ; => #t\n(check-dictionary-values 5 3 (list (list 'a 5) (list 'b 6) (list 'c 5))) ; => #f",
    "(define (check-equality v n)\n  (define (check-key-value key value)\n    (if (equal? value v)\n        #t\n        #f))\n  (define (check-all-values)\n    (define (check-next-value)\n      (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n          (check-key-value key (hash-ref (make-hash) key 'value))\n          #t))\n    (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n        (check-next-value)\n        #t))\n  (define (check-all-keys)\n    (define (check-next-key)\n      (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n          (check-key-value key (hash-ref (make-hash) key 'value))\n          #t))\n    (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n        (check-next-key)\n        #t))\n  (define (check-all)\n    (define (check-next)\n      (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n          (check-all-values)\n          (check-all-keys)))\n    (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n        (check-next)\n        #t))\n  (define (check-all)\n    (define (check-next)\n      (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n          (check-all-values)\n          (check-all-keys)))\n    (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n        (check-next)\n        #t))\n  (define (check-all)\n    (define (check-next)\n      (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n          (check-all-values)\n          (check-all-keys)))\n    (if (not (null? (cdr (assoc-ref (hash-ref (make-hash) key) 'value))))\n        (check-next)\n        #t))\n  (define (check-all)\n    (define (check-next)\n      (if (not (null? (cdr (assoc-ref (",
    "(define (check-equality v n)\n  (define (check-key-value key value)\n    (if (equal? value v)\n        #t\n        #f))\n  (define (check-dictionary)\n    (define (iter i)\n      (if (>= i n)\n          #t\n          (let ((key (read))\n                (value (read)))\n            (if (check-key-value key value)\n                (iter (+ i 1))\n                #f))))\n    (iter 0))\n\n(check-dictionary)\n\n; Sample Input-Output Pairs:\n; Input:\n; 5\n; 3\n; a 5\n; b 5\n; c 5\n; Output:\n; True\n\n; Input:\n; 5\n; 3\n; a 5\n; b 6\n; c 5\n; Output:\n; False",
    "(define (check-equality v n)\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n  (define (check-eq? key val)\n    (equal? val v))\n"
  ],
  "test_cases": [
    {
      "input": "10\n4\nCierra Vega 12\nAlden Cantrell 12\nKierra Gentry 12\nPierre Cox 12",
      "output": "False"
    },
    {
      "input": "12\n4\nCierra Vega 12\nAlden Cantrell 12\nKierra Gentry 12\nPierre Cox 12",
      "output": "True"
    },
    {
      "input": "5\n4\nCierra Vega 12\nAlden Cantrell 12\nKierra Gentry 12\nPierre Cox 12",
      "output": "False"
    }
  ]
}