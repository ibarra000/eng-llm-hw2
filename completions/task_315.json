{
  "task_id": 315,
  "description": "Find the first maximum length even word in a given string. An even word is a word whose length is even. If multiple words have the same maximum even length, return the first occurrence. If no even-length words exist, return -1.",
  "input_format": "A single line containing a string of words separated by spaces.",
  "output_format": "A single line containing the first maximum length even word, or -1 if none exist.",
  "prompt": "; Find the first maximum length even word in a given string. An even word is a word whose length is even. If multiple words have the same maximum even length, return the first occurrence. If no even-length words exist, return -1.\n; Input format: A single line containing a string of words separated by spaces.\n; Output format: A single line containing the first maximum length even word, or -1 if none exist.\n\n#lang racket\n\n",
  "completions": [
    "(define (find-first-max-even-word str)\n  (define (even-length? word) (even? (string-length word)))\n  (define (max-even-length-word words)\n    (define (helper words max-word)\n      (cond\n        [(empty? words) max-word]\n        [else\n         (let ([current (first words)])\n           (if (and (even-length? current) (> (string-length current) (string-length max-word)))\n             (helper (rest words) current)\n             (helper (rest words) max-word)))]))\n    (helper (string-split str) \"\"))\n  (max-even-length-word (string-split str)))\n\n(module+ test\n  (require rackunit)\n  (check-equal? (find-first-max-even-word \"hello world\") \"world\")\n  (check-equal? (find-first-max-even-word \"hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world hello world hello world\") \"hello\")\n  (check-equal? (find-first-max-even-word \"hello world hello world hello world hello world hello world hello world hello world hello\") \"hello\")\n  (check-equal? (find-first-max",
    "(define (find-first-max-length-even-word str)\n  (define (even-length? word)\n    (even? (string-length word)))\n  (define (max-length-even-word str)\n    (define (helper words)\n      (cond\n        [(empty? words) -1]\n        [(even-length? (first words))\n         (max (helper (rest words)) (string-length (first words)))]\n        [else (helper (rest words))]))\n    (helper (string-split str)))\n  (max-length-even-word str))\n\n;; Example usage:\n(find-first-max-length-even-word \"hello world this is a test\") ; Output: \"test\"\n(find-first-max-length-even-word \"hello world this is a test123\") ; Output: \"test\"\n(find-first-max-length-even-word \"hello world this is a test1234\") ; Output: \"test1234\"\n(find-first-max-length-even-word \"hello world this is a test12345\") ; Output: -1",
    "(define (find-first-max-length-even-word str)\n  (define (even-length? word)\n    (even? (string-length word)))\n  (define (max-length-even-word words)\n    (if (null? words)\n        -1\n        (let ([max-word (first words)])\n          (if (even-length? max-word)\n              max-word\n              (max-length-even-word (filter even-length? (rest words)))))))\n  (max-length-even-word (string-split str)))\n\n; Example usage:\n(find-first-max-length-even-word \"apple banana cherry date\") ; Output: \"banana\"\n(find-first-max-length-even-word \"hello world\") ; Output: -1",
    "(define (find-first-max-length-even-word str)\n  (define (even-length? word) (even? (string-length word)))\n  (define (max-length-even-word str)\n    (define (max-length-even-word-helper str acc)\n      (cond\n        [(empty? str) (if (empty? acc) -1 (first acc))]\n        [else\n         (let ([word (first str)])\n           (if (even-length? word)\n               (max-length-even-word-helper (rest str) (cons word acc))\n               (max-length-even-word-helper (rest str) acc)))]))\n    (max-length-even-word-helper (string-split str) '()))\n  \n  (max-length-even-word str))\n\n;; Example usage:\n(find-first-max-length-even-word \"hello world this is a test\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is a test is a\") ; Output: \"world\"\n(find-first-max-length-even-word \"hello world this is",
    "(define (first-max-length-even-word str)\n  (define (even-length? word) (even? (string-length word)))\n  (define (max-length-even-word str)\n    (define (helper words)\n      (cond\n        [(empty? words) -1]\n        [(even-length? (first words)) (first words)]\n        [else (helper (rest words))]))\n    (helper (string-split str)))\n  (max-length-even-word str))\n\n; Example usage:\n; (first-max-length-even-word \"hello world this is a test\")\n; => \"world\""
  ],
  "test_cases": [
    {
      "input": "python language",
      "output": "language"
    },
    {
      "input": "maximum even length",
      "output": "length"
    },
    {
      "input": "eve",
      "output": "-1"
    }
  ]
}