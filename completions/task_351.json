{
  "task_id": 351,
  "description": "Find the first element in an array that occurs exactly k times.",
  "input_format": "The first line contains the array elements as space-separated integers. The second line contains an integer n (the length of the array). The third line contains an integer k.",
  "output_format": "A single integer, the first element occurring exactly k times.",
  "prompt": "; Find the first element in an array that occurs exactly k times.\n; Input format: The first line contains the array elements as space-separated integers. The second line contains an integer n (the length of the array). The third line contains an integer k.\n; Output format: A single integer, the first element occurring exactly k times.\n\n#lang racket\n\n",
  "completions": [
    "(define (find-first-k-times arr k)\n  (define (helper i)\n    (cond\n      [(= i (length arr)) #f]\n      [(= (length (filter (lambda (x) (= x (car arr))) (cdr arr))) k) (car arr)]\n      [else (helper (+ i 1))]))\n  (helper 0))\n\n(define (main)\n  (let ([arr (map (lambda (x) (string->number (read-line))) (open-input-string (read-line)))]\n        [n (string->number (read-line))]\n        [k (string->number (read-line))])\n    (display (find-first-k-times arr k))))\n\n(main)",
    "(define (find-first-k-times arr k)\n  (define (helper i)\n    (cond\n      [(= i (length arr)) #f]\n      [(= (length (filter (lambda (x) (= x (car arr))) (cdr arr))) k) (car arr)]\n      [else (helper (+ i 1))]))\n  (helper 0))\n\n(define arr (map string->number (read-line)))\n(define n (string->number (read-line)))\n(define k (string->number (read-line)))\n\n(find-first-k-times arr k)",
    "(define (find-element k)\n  (let ([arr (read)])\n    (let ([n (read)])\n      (let ([k (read)])\n        (let ([count (make-hash)])\n          (for ([x arr])\n            (hash-set! count x (add1 (hash-ref count x 0))))\n          (for ([x arr])\n            (if (hash-ref count x 0) (displayln x))))))))\n\n(find-element 3)",
    "(define (find-element k)\n  (let ([arr (map string->number (read-line))])\n    (define (count-element x)\n      (let ([count (for/sum ([i arr]) (if (= i x) 1 0))])\n        (if (= count k) x #f)))\n    (for/first ([x arr] #:when (count-element x)) x)))\n\n(define k (read))\n(define n (read))\n(define arr (map string->number (read-line)))\n(find-element k)",
    "(define (find-element k)\n  (let ((arr (read)))\n    (let ((n (read)))\n      (let ((k (read)))\n        (let ((count (make-hash)))\n          (for ([i (in-range n)])\n            (let ((x (read)))\n              (hash-set! count x (add1 (hash-ref count x 0)))))\n          (for ([i (in-range n)])\n            (let ((x (read)))\n              (if (= (hash-ref count x 0) k)\n                  x\n                  #f))))))))\n\n;; Sample Input-Output Pairs\n;; Input:\n;; 1 2 3 4 1 2 3\n;; 7\n;; 2\n;; Output:\n;; 1\n;; Explanation:\n;; The first element that occurs exactly 2 times is 1."
  ],
  "test_cases": [
    {
      "input": "0 1 2 3 4 5\n6\n1",
      "output": "0"
    },
    {
      "input": "1 2 1 3 4\n5\n2",
      "output": "1"
    },
    {
      "input": "2 3 4 3 5 7 1 2 3 5\n10\n2",
      "output": "2"
    }
  ]
}