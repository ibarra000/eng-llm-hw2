{
  "task_id": 256,
  "description": "Count the number of prime numbers less than a given non-negative number.",
  "input_format": "A single integer n (non-negative) provided as input.",
  "output_format": "An integer output representing the count of primes less than n, followed by a newline.",
  "prompt": "; Count the number of prime numbers less than a given non-negative number.\n; Input format: A single integer n (non-negative) provided as input.\n; Output format: An integer output representing the count of primes less than n, followed by a newline.\n\n#lang racket\n\n",
  "completions": [
    "(define (count-primes n)\n  (define (prime? x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (helper x)\n      (cond ((= x 2) #t)\n            ((= x 1) #f)\n            ((= (remainder x 2) 0) #f)\n            ((= (remainder x 3) 0) #f)\n            ((= (remainder x 5) 0) #f)\n            ((= (remainder x 7) 0) #f)\n            ((= (remainder x 11) 0) #f)\n            ((= (remainder x 13) 0) #f)\n            ((= (remainder x 17) 0) #f)\n            ((= (remainder x 19) 0) #f)\n            ((= (remainder x 23) 0) #f)\n            ((= (remainder x 29) 0) #f)\n            ((= (remainder x 31) 0) #f)\n            ((= (remainder x 37) 0) #f)\n            ((= (remainder x 41) 0) #f)\n            ((= (remainder x 43) 0) #f)\n            ((= (remainder x 47) 0) #f)\n            ((= (remainder x 53) 0) #f)\n            ((= (remainder x 59) 0) #f)\n            ((= (remainder x 61) 0) #f)\n            ((= (remainder x 67) 0) #f)\n            ((= (remainder x 71) 0) #f)\n            ((= (remainder x 73) 0) #f)\n            ((= (remainder x 79) 0) #f)\n            ((= (remainder x 83) 0) #f)\n            ((= (remainder x 89) 0) #f)\n            ((= (remainder x 97) 0) #f)\n            ((= (remainder x 101) 0) #f)\n            ((= (remainder x 103) 0) #f)\n            ((= (remainder x 107) 0) #f)\n           ",
    "(define (count-primes n)\n  (define (is-prime? num)\n    (cond\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num 71) #t]\n      [(= num 73) #t]\n      [(= num 79) #t]\n      [(= num 83) #t]\n      [(= num 89) #t]\n      [(= num 97) #t]\n      [(<= num 100) #t]\n      [(= num 101) #t]\n      [(= num 103) #t]\n      [(= num 107) #t]\n      [(= num 109) #t]\n      [(= num 113) #t]\n      [(= num 127) #t]\n      [(= num 131) #t]\n      [(= num 137) #t]\n      [(= num 139) #t]\n      [(= num 149) #t]\n      [(= num 151) #t]\n      [(= num 157) #t]\n      [(= num 163) #t]\n      [(= num 167) #t]\n      [(= num 173) #t]\n      [(= num 179) #t]\n      [(= num 181) #t]\n      [(= num",
    "(define (count-primes n)\n  (define (is-prime? num)\n    (define (helper divisor)\n      (if (> divisor (sqrt num))\n          #t\n          (or (= (remainder num divisor) 0)\n              (helper (+ divisor 1)))))\n    (helper 2))\n  (define (count-primes-helper start)\n    (if (> start n)\n        0\n        (+ (if (is-prime? start) 1 0) (count-primes-helper (+ start 1)))))\n  (count-primes-helper 2))\n\n; Example usage:\n; (count-primes 10) ; Output: 4\n; (count-primes 20) ; Output: 8\n; (count-primes 30) ; Output: 10",
    "(define (count-primes n)\n  (define (is-prime? num)\n    (cond\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num 71) #t]\n      [(= num 73) #t]\n      [(= num 79) #t]\n      [(= num 83) #t]\n      [(= num 89) #t]\n      [(= num 97) #t]\n      [(<= num 1) #f]\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num ",
    "(define (count-primes n)\n  (define (is-prime? num)\n    (cond\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num 71) #t]\n      [(= num 73) #t]\n      [(= num 79) #t]\n      [(= num 83) #t]\n      [(= num 89) #t]\n      [(= num 97) #t]\n      [(<= num 1) #f]\n      [(= num 2) #t]\n      [(= num 3) #t]\n      [(= num 5) #t]\n      [(= num 7) #t]\n      [(= num 11) #t]\n      [(= num 13) #t]\n      [(= num 17) #t]\n      [(= num 19) #t]\n      [(= num 23) #t]\n      [(= num 29) #t]\n      [(= num 31) #t]\n      [(= num 37) #t]\n      [(= num 41) #t]\n      [(= num 43) #t]\n      [(= num 47) #t]\n      [(= num 53) #t]\n      [(= num 59) #t]\n      [(= num 61) #t]\n      [(= num 67) #t]\n      [(= num "
  ],
  "test_cases": [
    {
      "input": "5",
      "output": "2"
    },
    {
      "input": "10",
      "output": "4"
    },
    {
      "input": "100",
      "output": "25"
    }
  ]
}