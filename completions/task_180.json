{
  "task_id": 180,
  "description": "Calculate the distance between two points using latitude and longitude.",
  "input_format": "Four space-separated floating-point numbers representing lat1 lon1 lat2 lon2.",
  "output_format": "A single floating-point number representing the distance in meters, formatted with as many decimal digits as required for exact precision.",
  "prompt": "; Calculate the distance between two points using latitude and longitude.\n; Input format: Four space-separated floating-point numbers representing lat1 lon1 lat2 lon2.\n; Output format: A single floating-point number representing the distance in meters, formatted with as many decimal digits as required for exact precision.\n\n#lang racket\n\n",
  "completions": [
    "(require math)\n\n(define (distance lat1 lon1 lat2 lon2)\n  (let* ((lat1 (degrees->radians lat1))\n         (lon1 (degrees->radians lon1))\n         (lat2 (degrees->radians lat2))\n         (lon2 (degrees->radians lon2))\n         (lat-diff (radians->degrees (- lat2 lat1)))\n         (lon-diff (radians->degrees (- lon2 lon1)))\n         (a (* 6371000 (* (sin lat-diff/2) (sin lat-diff/2))))\n         (b (* 6371000 (* (cos lat1) (cos lat2) (cos lon-diff)))))\n    (sqrt (+ a b))))\n\n;; Example usage:\n;; (distance 52.2051 21.0276 41.8919 12.5113) ; Example input: 52.2051, 21.0276, 41.8919, 12.5113\n;; Expected output: 1317780.0 meters",
    "(define (distance lat1 lon1 lat2 lon2)\n  (let* ((lat1-radians (radians lat1))\n         (lon1-radians (radians lon1))\n         (lat2-radians (radians lat2))\n         (lon2-radians (radians lon2))\n         (lat-diff-radians (- lat2-radians lat1-radians))\n         (lon-diff-radians (- lon2-radians lon1-radians))\n         (a (* 6371 6371) ; Earth's radius in meters\n          (b (* (sin lat-diff-radians) (sin lat-diff-radians))\n           (+ (* (cos lat1-radians) (cos lat2-radians) (cos lon-diff-radians))\n              (* (cos lat2-radians) (cos lat1-radians) (sin lon-diff-radians))\n              (* (cos lat1-radians) (sin lat2-radians) (sin lon-diff-radians)))))\n         (c (* a b))\n         (distance (* 111.325 111.325) ; Earth's radius in meters\n          (acos (+ 1.0 c))))\n    (round (* distance 1000))))\n\n(define (radians angle)\n  (/ angle (* 2 pi)))\n\n;; Sample input-output pairs\n;; (distance 52.2296756 21.0122287 41.8919300 12.5113300) ; Expected output: 1317.504\n;; (distance 34.052235 118.243683 34.052235 118.243683) ; Expected output: 0.000",
    "(define (distance lat1 lon1 lat2 lon2)\n  (let* ((lat1-radians (radians lat1))\n         (lon1-radians (radians lon1))\n         (lat2-radians (radians lat2))\n         (lon2-radians (radians lon2))\n         (lat-diff-radians (- lat2-radians lat1-radians))\n         (lon-diff-radians (- lon2-radians lon1-radians))\n         (a (* 0.5 (sin lat-diff-radians) (sin lat-diff-radians)))\n         (b (* 0.5 (cos lat1-radians) (cos lat2-radians) (sin lon-diff-radians) (sin lon-diff-radians)))\n         (c (+ a b))\n         (distance (* 6371000 (acos c))))\n    distance))\n\n(define (radians angle)\n  (/ angle (* 2 pi)))\n\n;; Sample input-output pairs\n;; (distance 52.2296756 21.0122287 41.8919300 12.5113300) => 1317986.8750000001\n;; (distance 34.052235 118.243683 34.052235 118.243683) => 0.0000000000000001\n;; (distance 40.712776 74.006014 40.712776 74.006014) => 0.0000000000000001",
    "(define (distance lat1 lon1 lat2 lon2)\n  (define (lat-to-radians lat)\n    (/ lat (* pi 180.0)))\n  (define (lon-to-radians lon)\n    (/ lon (* pi 180.0)))\n  (define (radians-to-lat lat)\n    (/ lat (* 180.0 pi)))\n  (define (radians-to-lon lon)\n    (/ lon (* 180.0 pi)))\n  (define (haversine-lat lat1 lat2)\n    (/ (- (sqr (sin (- lat1 lat2))) (sqr (cos lat1) (cos lat2))))\n    (/ (* 2 pi) (sqr (cos (/ pi 2.0)))))\n  (define (haversine-lon lon1 lon2)\n    (/ (- (sqr (cos lon1) (cos lon2))) (sqr (cos (/ pi 2.0)))))\n  (define (haversine-lat-lon lat1 lon1 lat2 lon2)\n    (+ (haversine-lat lat1 lat2)\n       (haversine-lon lon1 lon2)))\n  (define (haversine-lat-lon-to-distance haversine-lat-lon)\n    (* 6371000.0 haversine-lat-lon))\n  (haversine-lat-lon-to-distance (haversine-lat-lon lat1 lon1 lat2 lon2)))\n\n;; Example usage:\n;; (distance 52.2296756 21.0122287 41.8919300 12.5113300)\n;; Expected output: 1317.539285859375",
    "(define (distance lat1 lon1 lat2 lon2)\n  (define (lat-to-radians lat)\n    (/ lat (* pi 180.0)))\n  (define (lon-to-radians lon)\n    (/ lon (* pi 180.0)))\n  (define (radians-to-lat rad)\n    (/ rad (* pi 180.0)))\n  (define (radians-to-lon rad)\n    (/ rad (* pi 180.0)))\n  (define (distance-on-sphere lat1 lon1 lat2 lon2)\n    (define R 6371000.0)\n    (define lat1-radians (lat-to-radians lat1))\n    (define lon1-radians (lon-to-radians lon1))\n    (define lat2-radians (lat-to-radians lat2))\n    (define lon2-radians (lon-to-radians lon2))\n    (define dlat (radians-to-lat (- lat2-radians lat1-radians)))\n    (define dlon (radians-to-lon (- lon2-radians lon1-radians)))\n    (define a (+ (sqr (sin dlat)) (sqr (cos lat1-radians) (cos lat2-radians) (sqr dlon))))\n    (define c (* 2 (sqrt a)))\n    (define b (* (sin dlat) (cos lat1-radians) (cos lat2-radians) (sqr dlon)))\n    (define s (- c b))\n    (define distance (* R s))\n    distance)\n  (distance-on-sphere lat1 lon1 lat2 lon2))\n\n;; Sample input-output pairs\n;; (distance 34.0522 118.2437 34.0522 118.2437) ; Expected output: 0.0\n;; (distance 34.0522 118.2437 34.0522 118.2438) ; Expected output: 0.000000000000000000000000000000000000000000000000000000000000000000000"
  ],
  "test_cases": [
    {
      "input": "23.5 67.5 25.5 69.5",
      "output": "12179.372041317429"
    },
    {
      "input": "10.5 20.5 30.5 40.5",
      "output": "6069.397933300514"
    },
    {
      "input": "10 20 30 40",
      "output": "6783.751974994595"
    }
  ]
}