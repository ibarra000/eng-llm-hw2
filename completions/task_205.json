{
  "task_id": 205,
  "description": "Given a tuple of integers, return a new tuple where each element is transformed by applying the inversion operation. The inversion operation for an element x is defined as -(x + 1).",
  "input_format": "A single line containing space-separated integers representing the elements of the input tuple.",
  "output_format": "A single line containing space-separated integers representing the elements of the output tuple.",
  "prompt": "; Given a tuple of integers, return a new tuple where each element is transformed by applying the inversion operation. The inversion operation for an element x is defined as -(x + 1).\n; Input format: A single line containing space-separated integers representing the elements of the input tuple.\n; Output format: A single line containing space-separated integers representing the elements of the output tuple.\n\n#lang racket\n\n",
  "completions": [
    "(define (inversion-operation x)\n  (- (+ x 1)))\n\n(define (transform-tuple input-tuple)\n  (map inversion-operation input-tuple))\n\n(define (main)\n  (let ([input-tuple (read)])\n    (displayln (transform-tuple input-tuple))))\n\n(main)",
    "(define (inversion-operation x)\n  (- (+ x 1)))\n\n(define (transform-tuple input-tuple)\n  (map inversion-operation input-tuple))\n\n(define (main)\n  (let ([input-tuple (read)])\n    (displayln (transform-tuple input-tuple))))\n\n(main)",
    "(define (inversion-operation tuple)\n  (map (lambda (x) (- (- x 1))) tuple))\n\n(define (main)\n  (let ([input-tuple (read)])\n    (displayln (inversion-operation input-tuple))))\n\n(main)",
    "(define (invert-tuple elements)\n  (map (lambda (x) (- (- x 1))) elements))\n\n(define (main)\n  (let ([input (read-line)])\n    (let ([elements (map string->number (string-split input \" \"))])\n      (displayln (invert-tuple elements))))\n\n(main)",
    "(define (inversion-operation tuple)\n  (map (lambda (x) (- x 1)) tuple))\n\n(define (main)\n  (let ([input-tuple (read)])\n    (displayln (inversion-operation input-tuple))))\n\n(main)"
  ],
  "test_cases": [
    {
      "input": "7 8 9 1 10 7",
      "output": "-8 -9 -10 -2 -11 -8"
    },
    {
      "input": "2 4 5 6 1 7",
      "output": "-3 -5 -6 -7 -2 -8"
    },
    {
      "input": "8 9 11 14 12 13",
      "output": "-9 -10 -12 -15 -13 -14"
    }
  ]
}