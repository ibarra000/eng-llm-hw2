{
  "task_id": 71,
  "description": "Sort a list of integers using the comb sort algorithm. Comb sort improves on bubble sort by comparing elements separated by a gap that decreases over time.",
  "input_format": "A single line containing space-separated integers.",
  "output_format": "A single line containing space-separated integers sorted in ascending order.",
  "prompt": "; Sort a list of integers using the comb sort algorithm. Comb sort improves on bubble sort by comparing elements separated by a gap that decreases over time.\n; Input format: A single line containing space-separated integers.\n; Output format: A single line containing space-separated integers sorted in ascending order.\n\n#lang racket\n\n",
  "completions": [
    ";; Function to perform comb sort on a list of integers\n(define (comb-sort lst)\n  (define (swap! i j)\n    (let ((temp (list-ref lst i)))\n      (list-set! lst i (list-ref lst j))\n      (list-set! lst j temp)))\n\n  (define (combsort lst)\n    (define (combsort-inner lst)\n      (define (combsort-inner-inner lst)\n        (define (combsort-inner-inner-inner lst)\n          (define (combsort-inner-inner-inner-inner lst)\n            (define (combsort-inner-inner-inner-inner-inner lst)\n              (define (combsort-inner-inner-inner-inner-inner-inner lst)\n                (define (combsort-inner-inner-inner-inner-inner-inner-inner lst)\n                  (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                    (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                      (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                        (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                          (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                            (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                              (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                  (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                    (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                      (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                        (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                          (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                            (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner lst)\n                                              (define (combsort-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner",
    ";; Function to perform comb sort on a list of integers\n(define (comb-sort lst)\n  (let loop ((lst lst) (gap (length lst)))\n    (if (< gap 2)\n        lst\n        (let ((i 0))\n          (let loop ((j 0))\n            (if (< j gap)\n                (loop (+ j 1))\n                (let ((x (list-ref lst j)))\n                  (let loop ((k 0))\n                    (if (< k gap)\n                        (loop (+ k 1))\n                        (if (<= i j)\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i 1)))\n                            (begin\n                              (set! i (+ i 1))\n                              (loop (+ i ",
    "(define (comb-sort lst)\n  (define (swap! i j)\n    (let ((temp (list-ref lst i)))\n      (list-set! lst i (list-ref lst j))\n      (list-set! lst j temp)))\n\n  (define (comb-sort-iter lst)\n    (let ((gap (sub1 (length lst)))\n          (swapped? #t))\n      (while (and swapped? (<= gap 1))\n        (set! swapped? #f)\n        (let ((gap (sub1 gap)))\n          (let ((i 0))\n            (while (< i (+ gap 1))\n              (if (and (>= i gap) (< (list-ref lst i) (list-ref lst (+ i gap))))\n                  (begin\n                    (swap! i (+ i gap))\n                    (set! swapped? #t))\n                  (set! i (+ i 1))))))))\n\n  (comb-sort-iter lst)\n  lst)\n\n;; Sample input-output pairs\n;; (comb-sort '(5 3 2 4 1)) => (1 2 3 4 5)\n;; (comb-sort '(1 2 3 4 5)) => (1 2 3 4 5)\n;; (comb-sort '(5 1 4 3 2)) => (1 2 3 4 5)",
    "(define (comb-sort lst)\n  (let loop ((lst lst) (gap (length lst)))\n    (if (< gap 1)\n        lst\n        (let ((i 0))\n          (let loop2 ((lst lst) (gap gap))\n            (if (zero? i)\n                (loop2 (cdr lst) (/ gap 1.3))\n                (let ((j (max 1 (floor (* gap (- i 1))))))\n                  (if (< j gap)\n                      (loop2 (cdr lst) j)\n                      (begin\n                        (if (<= (car lst) (car (cdr lst)))\n                            (set! lst (cons (car (cdr lst)) (cdr lst)))\n                            (set! lst (cons (car lst) (cdr lst))))\n                        (loop2 (cdr lst) j)))))))))\n\n;; Sample input-output pairs\n;; (comb-sort '(5 3 4 1 2)) => (1 2 3 4 5)\n;; (comb-sort '(10 9 8 7 6 5 4 3 2 1)) => (1 2 3 4 5 6 7 8 9 10)",
    ";; Function to perform comb sort on a list of integers\n(define (comb-sort lst)\n  (let loop ((lst lst) (gap (sub1 (length lst))) (sorted? #f))\n    (if (or (null? lst) (null? (cdr lst)))\n        lst\n        (let ((i 0))\n          (let loop2 ((lst lst) (gap gap) (sorted? #f))\n            (if (or (null? lst) (null? (cdr lst)))\n                lst\n                (let ((j (sub1 gap)))\n                  (if (or (null? lst) (null? (cdr lst)))\n                      lst\n                      (let ((x (car lst)))\n                        (let loop3 ((lst lst) (gap gap) (sorted? #f))\n                          (if (or (null? lst) (null? (cdr lst)))\n                              lst\n                              (let ((y (car (cdr lst))))\n                                (if (<= x y)\n                                    (loop3 (cdr lst) (sub1 gap) #t)\n                                    (begin\n                                      (set! i (add1 i))\n                                      (set! lst (cons y lst))\n                                      (loop3 (cdr lst) (sub1 gap) #f)))))))))))))))\n\n;; Example usage:\n;; (comb-sort '(5 3 4 1 2))\n;; Expected output: (1 2 3 4 5)"
  ],
  "test_cases": [
    {
      "input": "5 15 37 25 79",
      "output": "5 15 25 37 79"
    },
    {
      "input": "41 32 15 19 22",
      "output": "15 19 22 32 41"
    },
    {
      "input": "99 15 13 47",
      "output": "13 15 47 99"
    }
  ]
}